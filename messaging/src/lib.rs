wit_bindgen_wasmcloud_provider_host::generate!(
    MessagingProvider,
    "wasmcloud:messaging",
    "messaging"
);

use wasmcloud::messaging::types::BrokerMessage;
use wasmcloud_provider_sdk::core::LinkDefinition;

use async_trait::async_trait;

/// Messaging provider
struct MessagingProvider;

/////////////////////////////////////////////
// Trait fulfillment / Invocation handling //
/////////////////////////////////////////////
//
// The methods in this section are forced
// to be implemented/written due to trait + impl
// generated by the bindgen
//
#[async_trait]
impl WasmcloudMessagingConsumer for MessagingProvider {
    async fn request(
        &self,
        _ctx: wasmcloud_provider_sdk::Context,
        _subject: String,
        _body: Option<Vec<u8>>,
        _timeout_ms: u32,
    ) -> Result<Result<BrokerMessage, String>, wasmtime::Error> {
        Ok(Err("Not Implemented".into()))
    }

    async fn request_multi(
        &self,
        _ctx: wasmcloud_provider_sdk::Context,
        _subject: String,
        _body: Option<Vec<u8>>,
        _timeout_ms: u32,
        _max_results: u32,
    ) -> Result<Result<Vec<BrokerMessage>, String>, wasmtime::Error> {
        Ok(Err("Not implemneted".into()))
    }

    async fn publish(
        &self,
        _ctx: wasmcloud_provider_sdk::Context,
        _msg: BrokerMessage,
    ) -> Result<Result<(), String>, wasmtime::Error> {
        Ok(Err("Not Implemented".into()))
    }
}

//////////////////////////////////
//// Wasmcloud-internal methods //
//////////////////////////////////
//
// The WasmcloudCapabilityProvider trait is auto-generated, and the
// traits within it are used to ensure compatibility with a surrounding
// wasmCloud lattice.
#[async_trait]
impl WasmcloudCapabilityProvider for MessagingProvider {
    async fn put_link(&self, ld: &LinkDefinition) -> bool {
        eprintln!("TODO: put link for actor [{}]", ld.actor_id);
        // TODO
        false
    }
    async fn delete_link(&self, actor_id: &str) {
        eprintln!("deleting link for actor [{actor_id}]");
        // TODO
    }
    async fn shutdown(&self) {
        // TODO
    }
}
